{"version":3,"sources":["components/FormContact/FormContact.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/FormContact/FormContact.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css"],"names":["FormContact","onSubmit","useState","name","setName","number","setNumber","handelChange","e","currentTarget","value","reset","preventDefault","className","s","form","label","type","pattern","title","required","onChange","input","btn","ContactsList","contacts","delContact","list","map","id","onClick","Filter","onChangeFilter","App","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","contact","v4","find","toUpperCase","alert","prevState","includes","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.63c51f60.chunk.js","sourcesContent":["// import { Component } from 'react';\r\nimport { useState } from 'react';\r\nimport s from './FormContact.module.css';\r\n\r\nexport default function FormContact({onSubmit}){\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  function handelChange(e) {\r\n    const {name, value} = e.currentTarget;\r\n\r\n    switch(name){\r\n      case 'name':\r\n        setName(value)\r\n        break;\r\n      case 'number':\r\n        setNumber(value)\r\n        break;\r\n      default: return;\r\n    }\r\n  }\r\n\r\n  function handelSubmit (e){\r\n    e.preventDefault();\r\n\r\n    const contact = {name, number};\r\n    onSubmit(contact);\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n\r\n  };\r\n\r\n  return (\r\n          <form onSubmit={handelSubmit} className={s.form}>\r\n            <label className={s.label}>\r\n              Name\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={handelChange}\r\n                className={s.input}\r\n              />\r\n            </label>\r\n            <label className={s.label}>\r\n              Number\r\n              <input\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n                onChange={handelChange}\r\n                className={s.input}\r\n              />\r\n            </label>\r\n            <button type=\"submit\" className={s.btn}>\r\n              Add Contact\r\n            </button>\r\n          </form>\r\n        );\r\n}\r\n\r\n// class FormContact extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   handelChange = event => {\r\n//     const { name, value } = event.currentTarget;\r\n\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handelSubmit = event => {\r\n//     event.preventDefault();\r\n\r\n//     this.props.onSubmit(this.state);\r\n\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form onSubmit={this.handelSubmit} className={s.form}>\r\n//         <label className={s.label}>\r\n//           Name\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             onChange={this.handelChange}\r\n//             className={s.input}\r\n//           />\r\n//         </label>\r\n//         <label className={s.label}>\r\n//           Number\r\n//           <input\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//             onChange={this.handelChange}\r\n//             className={s.input}\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\" className={s.btn}>\r\n//           Add Contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FormContact;\r\n","import s from './ContactsList.module.css';\r\n\r\nconst ContactsList = ({ contacts, delContact }) => {\r\n  return (\r\n    <>\r\n      <ul className={s.list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li key={id}>\r\n            <span>\r\n              <b>{name}</b>: {number}\r\n            </span>\r\n\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => delContact(id)}\r\n              className={s.btn}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n","import s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n  return (\r\n    <label className={s.label}>\r\n      Find contact by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChangeFilter}\r\n        className={s.input}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","// import React, { Component } from 'react';\nimport { useState, useEffect } from 'react';\nimport { v4 } from 'uuid';\nimport 'modern-normalize';\nimport './App.css';\n\nimport FormContact from './components/FormContact';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? []\n  });\n  const [filter, setFilter] = useState('');\n\n  useEffect(() =>{\n    localStorage.setItem('contacts', JSON.stringify(contacts),[contacts]);\n  });\n\n  const FormSubmitHandler = ({ name, number }) => {\n    const contact = {\n      id: v4(),\n      name: name,\n      number: number,\n    };\n\n    if (\n      contacts.find(\n        ({ name }) => name.toUpperCase() === contact.name.toUpperCase(),\n      )\n    ) {\n      alert(`${contact.name} is already in contacts`);\n    } else if (\n      contacts.find(\n        ({ number }) => number === contact.number\n      )\n    ) {\n      alert(`${contact.number} is already in contacts`);\n    } else {\n      setContacts(prevState => [contact, ...prevState]);\n    }\n  };\n\n  const FilterContacts = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  function SearchContacts() {\n    return contacts.filter(({ name }) =>\n      name.toUpperCase().includes(filter.toUpperCase()),\n    );\n  }\n\n  const onDelBtnChange = id => {\n    return setContacts(prevState => [\n      ...prevState.filter(contact => contact.id !== id),\n    ]);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <h2>Phonebook</h2>\n        <FormContact onSubmit={FormSubmitHandler} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChangeFilter={FilterContacts} />\n        <ContactsList contacts={SearchContacts()} delContact={onDelBtnChange} />\n      </div>\n    </>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts')\n//     const parseCont = JSON.parse(contacts);\n\n//     if (parseCont) {\n//       this.setState({ contacts: parseCont })\n//     }\n\n//   }\n\n//   componentDidUpdate(preVProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log(\"Обновилось контакт\");\n\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   FormSubmitHandler = ({ name, number }) => {\n//     const contact = {\n//       id: v4(),\n//       name: name,\n//       number: number,\n//     };\n\n//     const { contacts } = this.state;\n\n//     if (\n//       contacts.find(\n//         ({ name }) => name.toUpperCase() === contact.name.toUpperCase(),\n//       )\n//     ) {\n//       alert(`${name} is already in contacts`);\n//     }\n//     else if (\n//       contacts.find(\n//         ({ number }) => number.toUpperCase() === contact.number.toUpperCase(),\n//       )) {\n//       alert(`${number} is already in contacts`);\n//     }\n//     else {\n//       this.setState(({ contacts }) => ({\n//         contacts: [contact, ...contacts],\n//       }));\n//     }\n//   };\n\n//   FilterContacts = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   SearchContacts = () => {\n//     this.state.contacts.filter(contact =>\n//       contact.name.toUpperCase().includes(this.state.filter.toUpperCase()),\n//     );\n//   };\n\n//   onDelBtnChange = id => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== id),\n//     }));\n//   };\n\n//   render() {\n//     const { FilterContacts, FormSubmitHandler, onDelBtnChange } = this;\n//     const { contacts, filter } = this.state;\n//     const normalizeContact = contacts.filter(contact =>\n//       contact.name.toUpperCase().includes(filter.toUpperCase()),\n//     );\n//     return (\n//       <>\n//         <div className=\"App\">\n//           <h2>Phonebook</h2>\n//           <FormContact onSubmit={FormSubmitHandler} />\n//           <h2>Contacts</h2>\n//           <Filter value={filter} onChangeFilter={FilterContacts} />\n//           <ContactsList\n//             contacts={normalizeContact}\n//             delContact={onDelBtnChange}\n//           />\n//         </div>\n//       </>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormContact_form__3Lswp\",\"label\":\"FormContact_label__1D-l8\",\"input\":\"FormContact_input__1SqSQ\",\"btn\":\"FormContact_btn__P96ll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__1bNrg\",\"btn\":\"ContactsList_btn__1NmV_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3SBLP\",\"input\":\"Filter_input__1M4b6\"};"],"sourceRoot":""}